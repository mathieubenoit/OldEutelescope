##############################################################################
#
# Configuration file for installing the ILC Software release v01-14
#
# Note: Please modify the directories according to your system
#
# Author: F.Gaede, DESY
# Date: Jun 29, 2010
#
##############################################################################

import os, sys

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( "/afs/cern.ch/eng/clic/software/x86_64-slc5-gcc41/ILCSOFT/cernInstallsConfigs/v01-16/", "versions-cern.cfg" )
execfile( versions_file )

ilcsoft_install_dir=os.getenv('PWD','/afs/cern.ch/work/a/apequegn/private/Testbeam_Software/LCD/EUTelescopeInstallation')

ilcsoft = ILCSoft( ilcsoft_install_dir )

# python variable for referring the ILC Home directory
# used to link or use already installed packages (SL5)
# --- set in release-versions.py ---
#ilcPath = "/afs/desy.de/group/it/ilcsoft/"
#ilcPath = "/afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/"

ilcPath = "/afs/cern.ch/eng/clic/software/x86_64-slc5-gcc41/ILCSOFT/v01-16/"

if not 'ilcPath' in dir():
    "raise ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# global options
ilcsoft.env["MAKEOPTS"]="-j3"
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="gfortran"
if( ilcsoft.os.isSL(4) ):
    ilcsoft.env["FC"]="g77"

ilcsoft.envcmake["CMAKE_SKIP_RPATH"]=1 

#--------- uncomment the following to build 32-bit mode on 64bit machines---
# default is now 64bit-native build
#
 #ilcsoft.env["CXXFLAGS"]="-m32"
 #ilcsoft.env["CFLAGS"]="-m32"
 #ilcsoft.env["FFLAGS"]="-m32"
 #ilcsoft.env["LDFLAGS"]="-m32"


#--------- set to 'OFF' to build 64-bit natively -------
ilcsoft.envcmake["BUILD_32BIT_COMPATIBLE"]="OFF"
#----------------------------------------------------------------

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="OFF"


#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
ilcsoft.downloadType = "svn"


#---------test beam packages 

ilcsoft.install( Eutelescope( "v00-08-00" ))
ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']='trunk'
ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='trunk'
ilcsoft.module("Eutelescope").rebuild=True


#-------------------------------------------------------------------------
# prerequisites: installed versions of Java, geant4, cernlib and mysql:
#  -> modify according to your system !
#-------------------------------------------------------------------------

#  when using 'link' or 'use' please specify full path to installed package
#  or use the version installed in afs (ilcPath) 


# MySQL
if 'MySQL_path' in dir():
    ilcsoft.link( MySQL( MySQL_path ))

# Java
if 'Java_path' in dir():
    ilcsoft.use( Java( Java_path ))

ilcsoft.use( ILCUTIL( ilcPath+"ilcutil/"+ILCUTIL_version ))

ilcsoft.use( LCIO( ilcPath+"lcio/"+LCIO_version )) 
#----- this will build the optional ROOT dictionary for LCIO -----
#------ set to OFF  if you don't want it
#ilcsoft.module("LCIO").envcmake['BUILD_ROOTDICT']='ON'
#ilcsoft.module("LCIO").envcmake['INSTALL_JAR']='OFF'
#ilcsoft.module("LCIO").envcmake['ROOT_HOME']='${ROOTSYS}'

ilcsoft.use( GEAR (ilcPath+"gear/"+ GEAR_version ))
#ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'


ilcsoft.use( CondDBMySQL( ilcPath+"CondDBMySQL/"+CondDBMySQL_version )) 
conddbmysql = ilcsoft.module( "CondDBMySQL" )
conddbmysql.env["COND_DB_DEBUGLOG"]="/dev/stdout"


ilcsoft.use ( LCCD( ilcPath+"lccd/"+LCCD_version ))
#ilcsoft.module("LCCD").envcmake['LCCD_CONDDBMYSQL']='OFF'

ilcsoft.use( RAIDA( ilcPath+"RAIDA/"+RAIDA_version ))

ilcsoft.use( CED( ilcPath+"CED/"+CED_version ))
#ilcsoft.module("CED").envcmake['CED_SERVER']='ON'


ilcsoft.use( Marlin( ilcPath+"Marlin/"+Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 'OFF'

ilcsoft.use( MarlinUtil( ilcPath+"MarlinUtil/"+MarlinUtil_version ))

#------- external packages

ilcsoft.use( ROOT( ROOT_path ))

ilcsoft.use( CLHEP( CLHEP_path))

ilcsoft.use( GSL( GSL_path )) 
gsl=ilcsoft.module( "GSL" )
#gsl.env["GSL"]=gsl.installPath
#gsl.envpath["LD_LIBRARY_PATH"].append ( "$GSL/lib");

ilcsoft.use( QT( QT_path ))
#-------------------------------------------------------------------


# cmake
ilcsoft.use( CMake( CMake_path  ))

# end of configuration file

